version: '3.8'

services:
  # WES Orchestration Engine
  wes-orchestration-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wes-orchestration-engine
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MONGODB_URI=mongodb://mongodb:27017/wes_orchestration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL_APP=DEBUG
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - paklog-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: wes-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=wes_orchestration
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      - paklog-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: wes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - paklog-network
    restart: unless-stopped

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: wes-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - paklog-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: wes-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - paklog-network
    restart: unless-stopped

  # Kafka UI (optional, for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: wes-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - paklog-network
    restart: unless-stopped

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: wes-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - paklog-network
    restart: unless-stopped

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: wes-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - paklog-network
    restart: unless-stopped

networks:
  paklog-network:
    driver: bridge

volumes:
  mongodb-data:
  mongodb-config:
  redis-data:
  prometheus-data:
  grafana-data: